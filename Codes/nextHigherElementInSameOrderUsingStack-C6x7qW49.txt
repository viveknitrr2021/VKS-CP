//https://practice.geeksforgeeks.org/problems/next-larger-element/0/?track=md-stack&batchId=144

#include<bits/stdc++.h>
typedef long long ll;
using namespace std;

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	ll t;cin>>t;
	while(t--){
		ll n;cin>>n;
		ll a[n],a1[n];
		for(ll i=0;i<n;i++) cin>>a[i];
		stack<ll> s;
		for(ll i=n-1;i>=0;i--){
			while(s.empty()==false and s.top()<a[i]) s.pop();
			s.empty()?a1[i]=-1:a1[i]=s.top();
			s.push(a[i]);
		}
		for(ll i=0;i<n;i++){
			cout<<a1[i]<<" ";
		}
		cout<<"\n";
	}
	return 0;
}

/*
1.-> In this approach we have started iterating from the last element(nth) to the first(1st) element
The benefit is that when we arrive at a certain index his next greater element will be already in stack and we can directly get this element while at the same index.
2.-> After reaching a certain index we will pop the stack till we get the greater element on top from the current element and that element will be the answer for current element
3.-> If stack gets empty while doing the pop operation then the answer would be -1
Then we will stored the answer in an array for the current index.
*/