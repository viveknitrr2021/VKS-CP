//connected components using dfs
//.....................................................

#include <bits/stdc++.h>
using namespace std;

template<typename T>

class Graph{
	map<T,list<T> > adjList;
public:
	void addEdge(T u,T v,bool bidir=true){
		adjList[u].push_back(v);
		if(bidir){
			adjList[v].push_back(u);
		}
	}
	void dfsHelper(T node,map<T,bool> &visited){
		//whenever come to a node mark it visited
		visited[node] = true;
		cout<<node<<" ";
		//try to find out a neighbour of the node which is not yet visited
		for(T neighbour: adjList[node]){
			if(!visited[neighbour]){
				dfsHelper(neighbour,visited);
			}
		}
	}
	void dfs(T src){
		map<T,bool> visited;
		int component =0;
		for(auto i:adjList){
			T city = i.first;
			if(!visited[city]){
				dfsHelper(city,visited);
				cout<<endl;
				component++;
			}
		}
		cout<<"The Graph has "<<component<<" components"<<"\n";
	}
};


int main()
{
	//g++ -o dfscnctd dfscnctd.cpp&dfscnctd.exe
	Graph<string> g;
	g.addEdge("Amritsar","Jaipur");
	g.addEdge("Amritsar","Delhi");
	g.addEdge("Delhi","Jaipur");
	g.addEdge("Mumbai","Jaipur");
	g.addEdge("Mumbai","Bhopal");
	g.addEdge("Delhi","Bhopal");
	g.addEdge("Mumbai","Bangalore");
	g.addEdge("Agra","Delhi");
	g.addEdge("Andaman","Nicobar");
	g.addEdge("LA","Chicago");
	g.dfs("Amritsar");

return 0;
}

/*.....................................................

OUTPUT..

Agra Delhi Amritsar Jaipur Mumbai Bhopal Bangalore
Andaman Nicobar
Chicago LA
The Graph has 3 components

*/