//https://codeforces.com/problemset/problem/755/C

/*.........................................................................................
		Dsu Pseudocode vks

class Set{
public:
	ll rank;
	ll parent;
	ll val;
};
ll find(Set *set,ll i){
	if(set[i].parent!=i){
		set[i].parent = find(set,set[i].parent);
	}
	return set[i].parent;
}
void Union(Set *set,ll v1,ll v2){
	ll v1_root = find(set,v1);
	ll v2_root = find(set,v2);
	if(set[v1_root].rank < set[v2_root].rank){
		set[v1_root].parent=v2_root;
	}
	else if(set[v1_root].rank > set[v2_root].rank){
		set[v2_root].parent=v1_root;
	}
	else{
		set[v2_root].parent=v1_root;
		set[v1_root].rank++;
	}
}

*/

/*....................................................................................*/
//solution


#include<bits/stdc++.h>
#define f(i,a,b) for(long long i=a;i<b;i++)
typedef long long ll;
using namespace std;
ll a[100005];
class Set{
public:
	ll rank;
	ll parent;
	ll val;
};
ll find(Set *set,ll i){
	if(set[i].parent!=i){
		set[i].parent = find(set,set[i].parent);
	}
	return set[i].parent;
}
void Union(Set *set,ll v1,ll v2){
	ll v1_root = find(set,v1);
	ll v2_root = find(set,v2);
	if(set[v1_root].rank < set[v2_root].rank){
		set[v1_root].parent=v2_root;
	}
	else if(set[v1_root].rank > set[v2_root].rank){
		set[v2_root].parent=v1_root;
	}
	else{
		set[v2_root].parent=v1_root;
		set[v1_root].rank++;
	}
}

int main(){
	ll n;cin>>n;
	Set *set = new Set[n+1];
	f(i,1,n+1){
		set[i].parent=i;
		set[i].rank=0;
	}
	f(i,1,n+1){
		ll a;cin>>a;
		set[i].val=a;
		Union(set,a,i);
	}
	map<ll,ll> mp;
	f(i,1,n+1){
		mp[find(set,set[i].val)]++;
	}
	cout<<mp.size()<<"\n";
	return 0;
}