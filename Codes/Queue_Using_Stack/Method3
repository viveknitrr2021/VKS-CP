//................................................................................
//Method 3
//Queue can also be implemented using one user stack and one Function Call Stack.

#include<bits/stdc++.h>
using namespace std;

class Queue{
public:
	stack<int> s;
	void enQueue(int x){
		s.push(x);
	}
	int deQueue(){
		if(s.empty()){
			cout<<"Q is empty";
			exit(0);
		}
		int x=s.top();
		s.pop();
		if(s.empty()) return x;
		int item = deQueue();
		s.push(x);
		return item;
	}
};

int main(){
	Queue q;
	q.enQueue(1);
	q.enQueue(2);
	q.enQueue(3);
	cout<<q.deQueue()<<"\n";
	cout<<q.deQueue()<<"\n";
	cout<<q.deQueue()<<"\n";
	return 0;
}

/*
enQueue(x)
  1) Push x to s.
deQueue:
  1) If s is empty then error.
  2) If s has only one element then return it.
  3) Recursively pop everything from the s, store the popped item 
    in a variable item,  push the x back to s and return item
*/
//................................................................................
