//................................................................................
//Method 1 (By making enQueue operation costly) 

#include<bits/stdc++.h>
using namespace std;

class Queue{
public:
	stack<int> s1,s2;
	void enQueue(int x){
		while(!s1.empty()){
			s2.push(s1.top());
			s1.pop();
		}
		s1.push(x);
		while(!s2.empty()){
			s1.push(s2.top());
			s2.pop();
		}
	}
	int deQueue(){
		if(s1.empty()){
			cout<<"Queue is empty\n";
			exit(0);
		}
		int x=s1.top();
		s1.pop();
		return x;
	}
};

int main(){
	Queue q;
	q.enQueue(1);
	q.enQueue(2);
	q.enQueue(3);
	cout<<q.deQueue()<<"\n";
	cout<<q.deQueue()<<"\n";
	cout<<q.deQueue()<<"\n";
	return 0;
}
/*
This method makes sure that oldest entered element is always at the top of stack 1, 
so that deQueue operation just pops from stack1. 
To put the element at top of stack1, stack2 is used.
*/
//................................................................................
