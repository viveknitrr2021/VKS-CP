//................................................................................
//Method 2 (By making deQueue operation costly)

#include<bits/stdc++.h>
using namespace std;

class Queue{
public:
	stack<int> s1,s2;
	void enQueue(int x){
		s1.push(x);
	}
	int deQueue(){
		if(s1.empty() && s2.empty()){
			cout<<"Q is empty\n";
		}
		if(s2.empty()){
			while(!s1.empty()){
				s2.push(s1.top());
				s1.pop();
			}
		}
		int x=s2.top();
		s2.pop();
		return x;
	}
};

int main(){
	Queue q;
	q.enQueue(1);
	q.enQueue(2);
	q.enQueue(3);
	cout<<q.deQueue()<<"\n";
	cout<<q.deQueue()<<"\n";
	cout<<q.deQueue()<<"\n";
	return 0;
}
/*
enQueue(q,  x)
  1) Push x to stack1 (assuming size of stacks is unlimited).
Here time complexity will be O(1)

deQueue(q)
  1) If both stacks are empty then error.
  2) If stack2 is empty
       While stack1 is not empty, push everything from stack1 to stack2.
  3) Pop the element from stack2 and return it.
Here time complexity will be O(n)

Method 1 moves all the elements twice in enQueue operation, 
while method 2 (in deQueue operation) moves the elements once 
and moves elements only if stack2 empty. 
So, the amortized complexity of the dequeue operation becomes theta(1) .
*/
//................................................................................
