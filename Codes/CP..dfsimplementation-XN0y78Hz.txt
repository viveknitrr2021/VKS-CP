//dfs implementation

#include <bits/stdc++.h>

using namespace std;

template<typename T>

class Graph{
	map<T,list<T> > adjList;
	map<T,bool> visited;
public:
	void addEdge(T u,T v){
		adjList[u].push_back(v);
		adjList[v].push_back(u);
	}
	void dfs(T node){
		//whenever come to a node mark it visited
		visited[node] = true;
		cout<<node<<" ";
		//try to find out a neighbour of the node which is not yet visited
		for(T neighbour: adjList[node]){
			if(!visited[neighbour]){
				dfs(neighbour);
			}
		}
	}
};

int main(){
	//g++ -o dfs dfs.cpp&dfs.exe
	Graph<int> g;
	g.addEdge(0,1);
	g.addEdge(1,2);
	g.addEdge(0,4);
	g.addEdge(2,4);
	g.addEdge(2,3);
	g.addEdge(3,5);
	g.addEdge(3,4);
	g.dfs(0);

return 0;
}